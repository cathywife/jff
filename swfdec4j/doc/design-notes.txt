# Encoding: GBK
#

实现中的一些考虑：

1. Tag 类族兼任了三种角色：
    Tag                 每种 tag 的数据对象表示
    TagDecoder          解析某种 tag
    TagDecoderFactory   根据 tag.code 得到 Tag 的子类对象，以进一步解析

   三个角色集于一身是为了尽量减少类的数目，而且 Tag 和 TagParser
   关系很紧密，解析一个 tag 后必然需要地方暂存解析结果。

2. Tag 的数据来源用的 ByteArrayReader，这里没用 InputStream 是因为
需要对输入数据的随机访问而不只是顺序访问，这样可以做按需解析，节省
内存。

3. Tag 里没有把 ByteArrayReader 作为成员变量，ByteArrayReader 的数据
来源不是 Tag 控制的，Tag.decode*() 的调用方可能在解析整个 swf 文件
时创建新的 ByteArrayReader，比如一次读取 1MB 创建一个 ByteArrayReader。

4. Tag 里的 concreteTags[] 实现了 Prototype 模式，如果调用方只是
遍历所有 tag 并输出那么不必对每个 tag 创建 Tag 对象，如果调用方
需要保存解析结果，那么调用 Tag.clone() 即可。concreteTags[] 中的
Tag 对象被重复利用。

5. 用 tag 来画图的功能没有放入 Tag 类族中，因为不同 Java 环境画图
API 不一样，而且对 Tag 做的操作可以很多，比如 draw，print，都放入
Tag 类时会让 Tag 类太臃肿，调用方只需要 draw 的功能没必要牵涉到
print 相关的类。

6. ByteArrayReader 类读取数据时没有对 offset 是否超过 length 进行判断，
这个判断是交给创建 ByteArrayReader 和 Tag.parse*() 的类负责的。

