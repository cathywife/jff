#!/bin/zsh

##在命令前插入 sudo {{{
#定义功能 
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    [[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
#光标移动到行末
    zle end-of-line
}
zle -N sudo-command-line
#定义快捷键为： [Esc] [Esc]
bindkey "\e\e" sudo-command-line
#}}}

####{{{
function timeconv { date -d @$1 +"%Y-%m-%d %T" }
# }}}

function bdiff() { diff "$1" "$2" || diff <(hex "$1") <(hex "$2") ; }

tohtml() {
        if test -z $1 ; then
                echo "tohtml <file>" >&2
                return 1
        fi
        vim -e +:TOhtml +w +qa $1
}

yyyymmdd () { date +%Y%m%d ; }
yyyymmdd-hhmmss () { date +%Y%m%d-%H%M%S ; }
alias ymd=yyyymmdd
alias ymd-hms=yyyymmdd-hhmmss

function vman() { vim -c ":RMan ${*}" ; }
function vimgrep () { tmp="$@" ; vim -c "vimgrep $tmp" ; }

function xpwd () { echo $PWD | xclip -i ; xclip -o ; }
function xcd () { cd `xclip -o` ; }

function sum() { SUM=0; while read NUM; do SUM=$(($SUM+$NUM)); done; echo $SUM; }

# ccd x will do cd ../x
alias cdd="cd `basename \`pwd\``"

#alias vnice="ionice -n7 nice -n20"
vnice() {
        if test -z "$1" ; then
                echo "vnice [ <pid> | <program> ]" >&2
                return 1
        elif ( echo "$1" | grep -q '^[0-9]*$' ) ; then
                ionice -n7 -p $1
                renice 20 $1
        else
                ionice -n7 nice -n20 $@
        fi
}

# this sorts teh /proc/*/maps
sortmapsfor () {
        test -z "$1" -o -n "$2" && ( echo "sortmapsfor <pid>" ; return 1)
        local m=/proc/$1/maps
        test -f $m || ( echo "$1 is not a valid pid" ; return 1)
        while read a rest ; do
                local s=${a%-*}
                local e=${a#*-}
                local l=$((0x$e - 0x$s))
                printf "%10s $s-$e $rest\n" $l
        done < $m | sort -n | cut -d ' ' -f 2-
}

# purge all cached data
dropcaches () {
        sync && sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
}

# short form of dig
dig1 () {
        dig +noauthority +noadditional +noqr +nostats +noidentify +nocmd +noquestion +nocomments $@
}

# generate html file from current directory
function dir-tohtml() {
    local td=""
    local of=""
    if [ $# = 1 ]; then
        of=$1;
    elif [ $# = 2 ]; then
        td=$1;
        of=$2;
    else
        echo "$0 [dir] <file>";
        exit 1;
    fi
    if [ ! -d $td ]; then
        echo "$0 [dir] <file>";
        exit 1;
    fi
    local dir_list;
    if [ "x$td" = "x" ]; then
        dir_list=(`ls .`)
    else
        dir_list=(`ls $td`)
    fi
    local real_path="";
    if [ "x$td" = "x" ]; then
        real_path=`pwd`
    else
        if [ ! $td = "/" ]; then
            real_path=$td
        fi
    fi

    echo -e "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd\">\n" \
            "<html>\n" \
            "<head>\n" \
            "<title>$of</title>\n" \
            "<meta http-equiv=\"content-type\" content=\"text/html\"; charset=UTF-8\">" \
            "</head>\n" \
            "\t<body bgcolor=\"#808080\" text=\"#ffffff\">\n" \
            "\t<font face=\"monospace\">" > $of
    for i in ${dir_list[@]};
    do
        echo -e "\t\t<a href=\"file://$real_path/$i\">$i</a>\n" \
                "\t\t<br>" >> $of
    done
    echo -e "\t</font>\n" \
            "\t</body>\n" \
            "</html>\n" >> $of
}
