#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper;
use File::Spec;
use Getopt::Long;
use HTTP::Response;
use IO::File;
use JSON;
use Log::Log4perl qw(:easy);
use POE qw(Component::Server::TCP Filter::HTTPD);
use POSIX ();
use Try::Tiny;
use constant APP_ENTRY_FILE     => "run";


my $g_port = 9999;
my $g_libexec_path = File::Spec->curdir;

my %g_action_table = (
    exec    => \&action_exec,
);

my %g_cookie_to_session;

#
# Initialize Log4perl
#
Log::Log4perl->easy_init({
        level   => $DEBUG,
        layout  => "[%d] %-5p (%P) %F{1}:%-4L - %m%n",
        #file   => ">plumber.log",
    });


#
# Process command line options
#
GetOptions("port=i"     => \$g_port,
           "exec=s"     => \$g_libexec_path);
die "Bad port $g_port\n" if $g_port <= 0 || $g_port > 65535;
die "Bad directory \"$g_libexec_path\"\n" unless -d $g_libexec_path;

INFO "listen on port $g_port";

#
# Start server
#
POE::Component::Server::TCP->new(
    Alias               => "Master",
    Port                => $g_port,
    Started             => \&on_master_started,
    ClientFilter        => "POE::Filter::HTTPD",
    ClientConnected     => \&on_client_connected,
    ClientDisconnected  => \&on_client_disconnected,
    ClientInput         => \&on_client_input,
);

POE::Kernel->run;
exit;


######################################################################
sub on_client_connected {
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    INFO "client connected from $heap->{remote_ip} " .
        "port $heap->{remote_port}, " .
        "session id " . $_[SESSION]->ID;

    register_HUP_INT_TERM_handler($kernel);
}


sub on_client_disconnected {
    my $heap = $_[HEAP];

    INFO "client disconnected from $heap->{remote_ip} " .
        "port $heap->{remote_port}, " .
        "session id " . $_[SESSION]->ID;
}


sub on_client_input {
    my ($kernel, $heap, $request) = @_[KERNEL, HEAP, ARG0];

    # It's a response for the client if there was a problem
    if ($request->isa("HTTP::Response")) {
        my $response = $request;

        $request = $response->request;
        WARN "bad request: ", $request->message if $request;

        $_[HEAP]{client}->put($response);
        $_[KERNEL]->yield("shutdown");
        return;
    }

    try {
        my $response = handle_request($request);
        $heap->{client}->put($response);
    } catch {
        ERROR "caught exception when handle request: $_";

        my $response = compose_http_response(500,
            "Caught exception when handle request!",
            "text/plain");
        $heap->{client}->put($response);

        $kernel->yield("shutdown");
    };
}


sub handle_request {
    my ($request) = @_;
    my $response;
    my $ref;

    if ($request->content) {
        $ref = decode_json $request->content;
    } else {
        return compose_http_response(302,
            "Not a JSON message, current time: " .
            scalar(localtime), "text/plain");
    }

    if (defined $ref && ref($ref) eq 'ARRAY' && @$ref > 0) {
        my $json = dispatch_json_request(@$ref);
        $response = compose_http_response(200, $json);
    } else {
        $response = compose_http_response(400,
            "Invalid JSON array message: " . $request->content,
            "text/plain");
    }

    return $response;
}


sub sig_HUP_INT_TERM {
    my ($kernel, $heap, $sig) = @_[KERNEL, HEAP, ARG0];

    my $who = "listener";
    if (! exists $heap->{listener}) {
        $who = "client";
    }

    WARN "$who got signal $sig!";

    $kernel->yield("shutdown");
    $kernel->sig_handled();
}


sub reap_child {
    my ($kernel, $session, $pid, $cookie) = @_[KERNEL, SESSION, ARG0, ARG1];

    INFO "register SIGCHLD handler for pid $pid in session " . $session->ID;

    $kernel->sig_child($pid, "sig_CHLD", $cookie);
}


sub sig_CHLD {
    my ($kernel, $session, $pid, $code, $cookie) =
        @_[KERNEL, SESSION, ARG1, ARG2, ARG3];

    INFO "got SIGCHLD: pid $pid in session " . $session->ID;

    if (exists $g_cookie_to_session{$cookie}) {
        my $pid2 = $g_cookie_to_session{$cookie}{pid};

        WARN "different pids: got $pid but recorded $pid2" if $pid != $pid2;

        # TODO: notify the session
        delete $g_cookie_to_session{$cookie};
    }
}


sub register_HUP_INT_TERM_handler {
    my ($kernel) = @_;

    $kernel->state("sig_HUP_INT_TERM", \&sig_HUP_INT_TERM);
    $kernel->sig(HUP    => "sig_HUP_INT_TERM");
    $kernel->sig(INT    => "sig_HUP_INT_TERM");
    $kernel->sig(TERM   => "sig_HUP_INT_TERM");
}


sub on_master_started {
    my $kernel = $_[KERNEL];

    register_HUP_INT_TERM_handler($kernel);

    $kernel->state("reap_child" => \&reap_child);
    $kernel->state("sig_CHLD", \&sig_CHLD);

    $ENV{PLUMBER_PORT} = $g_port;
}


sub compose_http_response {
    my ($code, $content, $type) = @_;
    my $length;

    $type ||= "application/json";
    {
        use bytes;
        $length = length($content);
    }

    my $response = HTTP::Response->new($code);
    $response->push_header("Content-Type", $type);
    $response->push_header("Content-Length", $length);
    $response->content($content);

    return $response;
}


sub dispatch_json_request {
    my ($action, @args) = @_;

    if (exists $g_action_table{$action}) {
        return encode_json( $g_action_table{$action}(@args) );
    } else {
        return encode_json(["bad", "Unknown action!"]);
    }
}


sub action_exec {
    my ($app, @args) = @_;

    if (! defined $app) {
        return ["bad", "app name missed!"];
    }

    if ($app  !~ /^[a-zA-Z0-9~_\+\-\.]+/) {
        return ["bad", "Invalid app name!"];
    }

    my $path = File::Spec->catfile($app, APP_ENTRY_FILE);
    if (! -f $path || ! -r $path || ! -x $path) {
        return ["bad", "Bad app name!"];
    }

    my $cookie = $app . "-" . time() ."-$$-" . int(rand(9999));

    my $pid = fork();
    if (! defined $pid) {
        return ["bad", "Failed to run app!"];
    }

    if ($pid) {
        INFO "created child process $pid";

        $g_cookie_to_session{$cookie} = {
            pid => $pid,
            sid => $poe_kernel->get_active_session()->ID,
        };

        # Register handler in "Master" session, so this child session
        # can quits before the child process quits.
        $poe_kernel->call("Master","reap_child", $pid, $cookie);

    } else {
        my $nullfh = IO::File->new(File::Spec->devnull);
        untie *STDIN;
        untie *STDOUT;
        untie *STDERR;

        open STDIN, '<&', $nullfh->fileno() or
            die "Can't redirect stdin(pid=$$): $!";

        $ENV{PLUMBER_COOKIE} = $cookie;
        exec { $path } $app or
            print STDERR "Can't execute $path: $!";

        POSIX::_exit(1);
    }

    return ["ok", "Spawned child process"];
}

