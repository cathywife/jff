#!/bin/bash
#
# A little script to backup /etc or dot files in home directory
# and record installed software list under version control.
#
# When executed with root permission, it does:
#   * create a .git or .hg directory in /
#   * fully manage /etc and partially /root, /var
#   * record installed software list(dpkg --list and dpkg --get-selections)
#     by APT hooks
#
# When executed without root permissioin, it does:
#   * partially manage ~/.*
#
#
# Example:
#   # cfgtool init
#   # cd /; cfgtool add etc; cfgtool commit -m "import /etc to init"
#   # cfgtool hook
#   # cfgtool log
#
#
# Reference:
#   * Tracking /etc etc
#     http://www.selenic.com/mercurial/wiki/index.cgi/TrackingEtcEtc
#   * Maintain /etc with mercurial on Debian
#     http://michael-prokop.at/blog/2007/03/14/maintain-etc-with-
#       mercurial-on-debian/
#   * A case for hg on /etc
#     http://ygingras.net/b/2007/11/a-case-for-hg-on-etc
#
# Author:
#   Liu Yubao <yubao.liu@gmail.com>
#
# Copyright:
#   Copyright (c) 2008 Liu Yubao, all rights reserved. 
#
# License:
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
# ChangeLog:
#   2008-1-25 Liu Yubao
#       * initial version 0.1.
#   2008-1-26 Liu Yubao
#       * add APT hook support, version 0.2.
#   
# TODO:
#   * feed output to pager automatically
#   * colorize output automatically
#   * add version check for Mercurial (>= 0.9.5)
#   * record file permission
#

VCS=
USER=`whoami`
IS_ROOT=0
VCS_ROOT="$HOME"
VCS_REPOS=
VCS_REPOS_ARG=


log () {
    if [ "-e" = "$1" ]; then
        opt_e="-e"
        shift
    fi
    echo $opt_e "[cfgtool] $1"
}


init_env () {
    LANG=C
    LC_ALL=C
    export LANG LC_ALL

    if [ "root" = "$USER" ]; then
        IS_ROOT=1
        VCS_ROOT=
    fi
}


check_repos () {
    if [ -d "$VCS_ROOT/.git" ]; then
        VCS=git
        VCS_REPOS="$VCS_ROOT/.git"
        VCS_REPOS_ARG="--git-dir $VCS_REPOS"
    elif [ -d "$VCS_ROOT/.hg" ]; then
        VCS=hg
        VCS_REPOS="$VCS_ROOT/.hg"
        VCS_REPOS_ARG="-R $VCS_ROOT/"
    else
        log "Can't find $VCS_ROOT/.git or $VCS_ROOT/.hg"
        log "use 'cfgtool init' to initialize repository."
        exit 1
        
    fi
}


save_file_in_vcs () {
    f="$1"
    m="$2"

    if [ -e "$f" ]; then
        if ! cmd_list | grep "^$f$" >/dev/null 2>&1; then
            log "save $f into vcs: $VCS_REPOS"
            cmd_add $f || return 1
        elif [ git == $VCS ]; then
            cmd_add $f || return 1
        fi
        $VCS $VCS_REPOS_ARG commit -m "$m" "$f" || return 1
    fi
}


select_vcs () {
    select VCS in GIT Mercurial; do
        break
    done
    if [ -z "$VCS" ]; then
        log "Support only GIT and Mercurial, abort."
        return 1
    elif [ "$VCS" = "GIT" ]; then
        VCS=git
        git help init 1>/dev/null 2>&1 || {
            log "Can't find git, please install it first, eg:"
            log "  aptitude install git-core"
            return 2
        }
        VCS_REPOS="$VCS_ROOT/.git"
    else
        VCS=hg
        hg --version 1>/dev/null 2>&1 || {
            log "Can't find mercurial, please install it first, eg:"
            log "  aptitude install -R mercurial"
            log "NOTICE: Mercurial 0.9.5 or higher version is needed!"
            return 2
        }
        VCS_REPOS="$VCS_ROOT/.hg"
    fi
}


cmd_init () {
    if [ -z "$VCS" ]; then
        log "Which version control system to use?"
        select_vcs || exit 1

        log
        log -e "Prepare repository $VCS_REPOS..."
        cd "$VCS_ROOT/" && $VCS $VCS_REPOS_ARG init && chmod 700 "$VCS_REPOS" || {
            exit 1
        }
        log
        log -e "Use 'cfgtool add' or '$VCS add' to add some files into"
        log -e "repository, eg. /etc, ~/.*\n\n"
    else
        log "$VCS_REPOS has been initialized."
    fi


    # save output from dpkg --list and dpkg --get-selections
    [ 0 -eq $IS_ROOT ] && return 0

    if which dpkg >/dev/null 2>&1; then
        save_file_in_vcs root/dpkg--list.txt    \
            "save output from dpkg --list" || exit 1
        save_file_in_vcs root/dpkg--get-selections.txt  \
            "save output from dpkg --get-selections" || exit 1

        dpkg --list > /root/dpkg--list.txt || exit 1
        dpkg --get-selections > /root/dpkg--get-selections.txt || exit 1

        save_file_in_vcs root/dpkg--list.txt    \
            "save new output from dpkg --list when do cfgtool init" ||
                exit 1
        save_file_in_vcs root/dpkg--get-selections.txt  \
            "save new output from dpkg --get-selections when do cfgtool init" ||
                exit 1

    fi
}


cmd_add () {
    $VCS $VCS_REPOS_ARG add "$@"
}


cmd_remove () {
    $VCS $VCS_REPOS_ARG rm "$@"
}


cmd_copy () {
    if [ "git" = "$VCS" ]; then
        cp "$@" && git $VCS_REPOS_ARG add "${!#}"
    else
        hg $VCS_REPOS_ARG cp "$@"
    fi
}


cmd_rename () {
    $VCS $VCS_REPOS_ARG mv "$@"
}


cmd_commit () {
    if [ "git" = "$VCS" ]; then
        $VCS $VCS_REPOS_ARG commit -a "$@"
    else
        hg $VCS_REPOS_ARG commit "$@"
    fi
}


cmd_log () {
    $VCS $VCS_REPOS_ARG log "$@"
}


cmd_status () {
    $VCS $VCS_REPOS_ARG status "$@"
}


cmd_diff () {
    $VCS $VCS_REPOS_ARG diff "$@"
}


cmd_list () {
    if [ "git" = "$VCS" ]; then
        git $VCS_REPOS_ARG ls-files "$@"
    else
        hg $VCS_REPOS_ARG manifest "$@"
    fi
}


cmd_hook () {
    if [ 0 -eq $IS_ROOT ]; then
        log "Only root can use this function!"
        return 1
    fi

    if ! which apt-get >/dev/null 2>&1; then
        log "Can't find apt-get in PATH, is this Debian system?"
        return 1
    fi

    # install cfgtool to /root/cfgtool
    if [ ! -e /root/cfgtool ]; then
        log
        log "!!!!! Please copy cfgtool to /root/cfgtool and"
        log "!!!!! run 'chmod 500 /root/cfgtool'"
        log
    fi

    # install APT hook
    cd "$VCS_ROOT/"
    save_file_in_vcs etc/apt/apt.conf "save apt.conf before hook APT" ||
        exit 1

    if ! grep cfgtool /etc/apt/apt.conf >/dev/null 2>&1; then
        cat >> /etc/apt/apt.conf <<EOF

// added automatically by cfgtool ------------> begin
DPkg {
  Pre-Invoke { "if [ -x /root/cfgtool ]; then /root/cfgtool hook_pre; fi"; };
  Post-Invoke { "if [ -x /root/cfgtool ]; then /root/cfgtool hook_post; fi"; };
}
// added automatically by cfgtool <------------ end

EOF
        save_file_in_vcs etc/apt/apt.conf "save apt.conf after hook APT" ||
            exit 1
        log "Cfgtool has been install in /etc/apt/apt.conf"
    fi
}


do_hook () {
    if [ 0 -eq $IS_ROOT ]; then
        log "Only root can use this function!"
        return 1
    fi

    dpkg --list > /root/dpkg--list.txt || exit 1
    dpkg --get-selections > /root/dpkg--get-selections.txt || exit 1
    save_file_in_vcs root/dpkg--list.txt    \
        "dpkg --list from $LOGNAME $1: $caller"
    save_file_in_vcs root/dpkg--get-selections.txt  \
        "dpkg --get-selections from $LOGNAME $1: $caller"

    caller=$(ps axww | \
        awk '/aptitude|apt-get/ {for (i=5; i<=NF; i++) printf("%s ", $i); printf("\n")}' \
        |head -1)
    cd $VCS_ROOT/
    cmd_commit -m "snapshot from $LOGNAME $1: $caller"

    # ignore errors
    return 0
}


cmd_hook_pre () {
    do_hook "before" >/dev/null 2>&1
}


cmd_hook_post () {
    do_hook "after" >/dev/null 2>&1
}


cmd_version () {
    cat <<EOF
Cfgtool 0.2, Copyright (C) 2008 Liu Yubao

Cfgtool comes with ABSOLUTELY NO WARRANTY, it is free software, and
you are welcome to redistribute it under certain conditions; read
comment in the beginning of this script for details.

EOF
}


cmd_help () {
    cat <<EOF
Usage: cfgtool subcommand arguments...

Cfgtool is a little script to backup /etc or dot files in home directory
and record installed software list under version control.

Most commands are simple wrappers to the corresponding commands in GIT
or Mercurial, you can use the VCS tool directly.
    
Available sub commands and their equivalent commands in GIT and Mercurial:

    init      : git init                hg init
    add       : git add                 hg add
    remove    : git rm                  hg rm
    copy      : cp && git add           hg cp
    rename    : git mv                  hg mv
    commit    : git commit -a           hg commit
    log       : git log                 hg log
    status    : git status              hg status
    diff      : git diff                hg diff
    list      : git ls-files            hg manifest
    hook      : install Pre-Invoke and Post-Invoke hooks to APT
    version   : show version of Cfgtool
    help      : show this help information

EOF
}


#------------- main entry -----------------------
init_env

CMD="$1"
if [ -z "$CMD" ]; then
    log "Missing arguments, use 'cfgtool help' to get help."
    exit 1;
fi

shift
case "$CMD" in
    init)
        cmd_init "$@"
        ;;
    add|remove|copy|rename|commit|log|status|diff|  \
    list|hook|hook_pre|hook_post)
        check_repos
        cmd_$CMD "$@"
        ;;
    version|help)
        cmd_$CMD "$@"
        ;;
    *)
        log "Bad command '$CMD', use 'cfgtool help' to get help."
        exit 1
        ;;
esac

# vi: et ts=4 sw=4

