#!/bin/bash
#
# Purpose:
#   a little script to call equivs automatically according to the package list
#   from `apt-get install -s`, `apt-get upgrade -s`, `apt-get dist-upgrade -s`.
#
# Usage:
#   ./more-equivs install jde
#   ...edit ./blacklist to leave only gcj related packages...
#   ./more-equivs
#   dpkg -i *gcj*.deb
#   apt-get install jde
#
# Author:
#   Liu Yubao <yubao.liu@gmail.com>, 2008-04-16
#
# License:
#   GPL v2 or later.
#   This is free software: you are free to change and redistribute it.
#   There is NO WARRANTY, to the extent permitted by law.
#


function usage {
    cat<<EOF
Usage: more-equivs subcmd ...
    available sub commands:
      install ...
      upgrade ...
      dist-upgrade
      equivs
      help
EOF
    exit -1
}


function cmd_checkinst {
    if [ -e "./blacklist" ]; then
        echo Please remove ./blacklist first, more-equvis doesn\'t overwrite it.
        exit -1
    fi

    echo Using \`apt-get $apt_cmd -s "$@"\` to get depends to be installed...
    if apt-get $apt_cmd -s "$@" | grep '^\s*Inst' |
            sed -e "s/^\s*Inst \([^ ]*\) \(\[.*\] \)\?(\(.*\) Debian.*/\1\t\t\t\3/" \
            >./blacklist; then
        echo Edit ./blacklist to leave only packages you don\'t need,
        echo then run \`more-equivs equivs\` or \`more-equivs\`.
    else
        rm blacklist
        echo something goes wrong.
    fi
}


function cmd_equivs {
    if [ ! -e "./blacklist" ]; then
        echo "./blacklist not found."
        echo
        usage
    fi

    if [ -e "./control" ]; then
        echo Please remove ./control first, more-equvis doesn\'t overwrite it.
        exit -1
    fi

    while read pkg ver; do
        echo generating ./control for $pkg-$ver...
        cat > ./control <<EOF
### Commented entries have reasonable defaults.
### Uncomment to edit them.
Section: misc
Priority: optional
Standards-Version: 3.6.2

Package: $pkg
Version: $ver
Maintainer: more-equivs <more-equivs@tsg.net>
# Pre-Depends: <comma-separated list of packages>
# Depends: <comma-separated list of packages>
# Recommends: <comma-separated list of packages>
# Suggests: <comma-separated list of packages>
# Provides: <comma-separated list of packages>
# Replaces: <comma-separated list of packages>
# Architecture: all
# Copyright: <copyright file; defaults to GPL2>
# Changelog: <changelog file; defaults to a generic changelog>
# Readme: <README.Debian file; defaults to a generic one>
# Extra-Files: <comma-separated list of additional files for the doc directory>
Description: <short description; defaults to some wise words> 
 long description and info
 .
 This package is generated by equivs.

EOF
    echo building package $pkg-$ver with equivs-build...
    if equivs-build ./control > /dev/null; then
        echo build $pkg-$ver successfully. 
    else
        echo something goes wrong, stop.
        exit -1
    fi
    echo
    done < ./blacklist
    rm ./control
    echo use \`dpkg -i *.deb\` to install these packages.
}


function cmd_help {
    cat <<EOF
An example scenario:
    ./more-equivs install jde
    ...edit ./blacklist to left only gcj related packages...
    ./more-equivs
    dpkg -i *gcj*.deb
    apt-get install jde
EOF
}

##################################################################################
if ! which equivs-build 1>/dev/null 2>&1; then
    echo \`equivs-build\` not found, have you installed \`equivs\' package?
    exit -1
fi

if ! which apt-get 1>/dev/null 2>&1; then
    echo \`apt-get\' not found, is this a Debian family Linux distribution?
    exit -1
fi

if [ -z "$1" ]; then
    CMD="equivs"
elif [ "$1" = "help" ]; then
    CMD="help"
else
    apt_cmd="$1"
    [ "$apt_cmd" != "install" -a "$apt_cmd" != "upgrade" -a \
        "$apt_cmd" != "dist-upgrade" ] && usage
    CMD="checkinst"
    shift
fi


cmd_$CMD "$@"

