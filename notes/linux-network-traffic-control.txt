http://lartc.org/howto/
man tc

http://lartc.org/howto/lartc.qdisc.advice.html
classless queueing disciplines:

    * pfifo_fast: default, has three bands for prioritizing traffic according to TOS bits
    * tbf: token bucket filter, slow down outgoing traffic for a whole network interface
    * sfq: Stochastical Faireness Queueing, fair among multiple connections
    * pfifo or bfifo: check backlog on an interface, no internal band
    * red(random early detection), choke(variation of RED), codel(improvement on RED and its variants):
      on backbone networks where the kernel can't afford the complexity of per-session state tracking
      needed by faireness queueing.

http://lartc.org/howto/lartc.qdisc.classful.html#AEN1071
classful queueing disciplines:

    * cbq: very complex
    * htb: a more understandable and intuitive replacement for the CBQ
    * prio
    * drr: deficit round robin scheduler, more flexible replacement for SFQ


rate limit on ingress traffic:

    (1) use ingress queueing discipline:
        http://lartc.org/howto/lartc.adv-filter.policing.html
        http://b42.cz/notes/u32_classifier/

    $ sudo tc qdisc del dev eth0 ingress        # clear existed qdisc
    $ sudo tc qdisc add dev eth0 ingress        # default handle is ffff:
    $ sudo tc filter add dev eth0 parent ffff: protocol ip prio 50 u32 \
        match ip protocol 0x6 0xff \
        match ip dport 80 0xffff \
        police rate 20mbps burst 160kb drop \
        flowid :1


    (2) use ifb(Intermediate Functional Block device) and engress queueing discipline:
        http://www.linuxfoundation.org/collaborate/workgroups/networking/ifb
        https://github.com/rfrail3/misc/blob/master/tc/traffic-control.sh

        It's the successor to the IMQ(InterMediate Queueing device) iptables module.

    $ sudo modprobe ifb numifbs=1
    $ sudo ip link set dev ifb0 up
    $ sudo tc filter add dev eth0 parent ffff: protocol ip prio 50 u32 \
        match u32 0 0 \
        action mirred egress redirect dev ifb0      # redirect ingess eth0 to egress ifb0

    ... then configure HTB based shaping on ifb0 ...


    (3) iptables extensions: limit or hashlimit: man iptables-extensions

    xt_limit works like token bucket filter. Notice the maximum value for "--limit" is 10000.

    $ sudo iptables -N ratelimit
    $ sudo iptables -A ratelimit -m limit --limit 5000/s --limit-burst 5000 -j ACCEPT
    $ #sudo iptables -A ratelimit -j LOG --log-level "NOTICE" --log-prefix "[RATE_LIMIT]"       # too many logs
    $ sudo iptables -A ratelimit -j DROP
    $ sudo iptables -A INPUT -i eth0 -p tcp --dport 80 -j ratelimit

        how to delte chain 'ratelimit':
        $ sudo iptables -L -n --line-numbers
        $ sudo iptables -D INPUT n
        $ sudo iptables -F ratelimit
        $ sudo iptables -X ratelimit

