逛书店观系统管理服务配置书籍归来


去亚运村图书大厦跑了趟，发现有十几本这方面的书，粗略看了下，
写的稍好的只有两三本，大部分书的废话占三分之一篇幅。所有的
书都没有整体感，把各个服务拆开来讲，没有一本提到 kerberos，
pam-ldap/nss-ldap 单点登录的。

有两本国家规划教材啥的，其中一本还在讲安装 QQ for linux，FlashGet
for Linux。 有一本铁道部 2010 年 6 月出的，dovecot、cyrus-imapd
章节貌似抄袭了人邮一本 2009 年出的书，文字一样，图片一样，排版稍有差别，
不知道是抄袭还是作者换了个名字一稿多投。

一直对系统管理有兴趣，起因是以前工作中经常被强迫兼任系统管理员，
配置个 svn、git、samba、bugzilla、wordpress 啥啥的，经常觉得
磨枪上阵，一团稀泥，没有可回溯性。 前两年跟 JulyClyde@newsmth
聊过一些有关系统管理的话题，伊提出规范化管理，与我心颇有戚戚焉，
可惜那只懒虫忙于发春，疏于撰文，我原还期待伊能整一本系统管理经典
书籍出来。。。。写书我是没耐心的，麻烦，累，赚不了几个子，太严肃，
容易被人骂，修订困难，等等等等，还是时不时码个三言两语符合我
Perl coder 的优良传统：懒惰:-)

闲话少说，切入正题，先聊聊我对 IT 行业小规模基础设施管理方面的想法。

(0.1) 配置可重复性

尽量自动化配置，把配置过程记录成脚本，减少 ad hoc 的东改西改。

(0.2) 对系统管理员狠一点，尽量不提供图形界面

普通用户是应该享受图形界面的便利的，而对于系统管理，往往脚本
方式更便利，更容易定制，更容易接触到核心，可以强迫人学习，而且
图形界面的东西往往容易给系统管理引入安全问题。 

(1) 单点登录，账户统一管理，权限设置分开

单点登录是极为重要的，每个服务一个密码的做法太不方便了。在内部系统
单点登录方面，Kerberos + LDAP 是很传统的做法，Microsoft 的 Active
Directory 就是个集成了Kerberos(带私有扩展) 和目录服务的集成服务。
Windows, Linux, Unix, MacOS 均对 Kerberos + LDAP 有较好支持。

通过 Kerberos + LDAP，账户可以统一管理了（很多服务都支持从 LDAP
读取账户信息)，但权限管理由于各个服务权限定义方式不一样，难以
集中存放，所以权限设置分开在各个服务特定的存储方式里。

单点登录在 Web 上稍微复杂点，似乎 Kerberos 用于 Web 应用不是那么
自如，Web SSO 有许多独有的方案，比如 CAS, SAML, OpenID，还有用于
Web app 之间授权的 OAUTH。

总之，我期望的单点登录系统要达到的效果：
  * 从 PC 登录后，不用再输入密码即可访问所有授权的服务
  * 可以根据用户名查询其在所有服务中的分组、授权情况
  * 可以注销一个账户即可注销其之前授权的所有服务

我现在所在的公司没有用 Kerberos + LDAP，不知道出于什么考虑，
Linux/Unix 主机上用账户信息同步得到统一账户效果，Windows 桌面机
用 Windows 域，大家用 ssh 公钥认证 得到 Linux/Unix 多主机无密码
登录效果。Web SSO 方面公司做的非常好，可能跟互联网背景有关系。


(2) 工作涉及的 IT 基础设施越少越好，特别是文档不要用多种存储途径

在前公司曾经历过文档分散的不良体验，一开始我们用 svn 管理文档，
分目录，非常清晰，但这种方式编辑体验不好，后来我们尝试 wiki、
drupal、wordpress，多个系统并用，然后就乱套了，虽然大家各有所好
各得其所，但找个资料太麻烦了，大家阅读时需要关注的地方太杂。

关于 bug 管理和项目跟踪，也有类似的问题，bugzilla, twiki, trac 都
搞过，大家各有所好，要找个东西，或者回溯历史，头绪纷杂。

另外大家很可能同时在用 bug 跟踪系统、工作流系统、请假系统，
报销系统，其实这三者完全可以放在一起，最土鳖的办法是用
bugzilla，我现在所在公司就用 bugzilla 做工作流系统，现在
已有五百万 tickets 了（赞 bugzilla 之强大！)。

在我所在公司里，开发人员需要频繁面对的系统很精简，都是必不可少的：
svn 用于源码管理, bugzilla 用于 bug 管理以及工作流跟踪,
twiki 用于文档管理, hudson 用于自动构建, package repository
用于存放打包结果，这种工具链，说夸张点，已经形成了统一稳定的
主流开发文化。公司也有 blog 服务，但不是主流。

(3) 信息的良好分类以及级别很重要

在 Web 2.0 时代，大家很习惯用标签、搜索来标记文章，知识库往往成了
平铺的网状结构，一个垃圾场。个人非常不喜欢这点，我觉得良好的树状
分类如同网站导航，必须是主要的索引办法，而标签、搜索只是辅助，
树状分类尤其对新人有利。

另外，信息需要有级别之分，譬如有个打分的机制，让重要的文档自动
浮现出来，不要一眼望去，密密麻麻都是文档链接。文档可以很多，但是
重要的、权威的文档应当很少、很正式、很容易找到。

这点公司做的很不好，twiki 是个蕴含无数宝藏的垃圾场，幸好它的
搜索支持的很好。

(4) 建立内部搜索引擎

人总是懒惰和健忘的，信息总是多的数不过来的，所以一个内部搜索引擎是很有
必要的，这方面 apache solr 貌似颇堪重任。

我所在公司内部有搜索引擎，可以搜索文档、人员联系方式等等，还比较好用。

(5) 软件包命名，版本号，依赖关系的规范化

在 IT 公司，往往会内部产生大量软件包，如何有效维护它们是很头疼的问题，
这方面 Linux 发行版做的很好，尤其是我喜爱的 Debian，其软件包管理维护
的有条不紊。另外 APR 关于版本号记法的文章非常值得参考：

    http://apr.apache.org/versioning.html

这点公司做的不好，现在大家有点觉悟，但积重难返，软件包管理还
是比较混乱的，经常安装、编译出问题。

(6) 开发人员手册，一个系统上手的第一手信息，对于新人非常重要

在软件开发过程中，大家往往不注意这方面信息的积累和规范化，
比如编译一个产品，东一帖西一帖，也不知道是不是与时俱进。
如果新员工入职，能收到一份 developer handbook，介绍公司的
IT 基础设置，基本开发环境，能收到一份所在项目的 newbie kickstart，
给人的感觉是无与伦比的。

这点公司做的很好，内部非常重视文档的规范化管理，有集中的
文档网站，很正式，很漂亮，开篇第一个文档就是 developer handbook，
我连夜看完，很有感触。

(7) 容器、虚拟化技术，方便快速建立统一的开发、测试、运行环境

软件开发人员最常扯皮的事情是“我这里好好的啊”，如果使用容器、虚拟化
技术，那么大家能非常容易的建立统一环境，做事情可重复，会让开发
过程更为流畅。

我所在公司有统一的 chroot 和 vm 工具，建立环境非常快速方便。

