Debian、系统配置管理工具

作为 Debian 爱好者，选择一个 OS 配置服务，自然选择 Debian Linux 了。就我所知，Debian 是社区 Linux 发行版中管理最为有条理最为规范的，软件包信息页面 http://packages.debian.org/sid/vim-nox 很规整，右边 Bug Reports 和 Developer Information 是我在这个页面最喜欢的链接，另外透露一个小技巧，用 dget 命令下载页面右边的 .dsc 文件链接，可以快速的下载对应的 Debian 源码包。开发者信息页面 http://packages.qa.debian.org/v/vim.html 列出了打包开发过程的重要信息，我就不一一列举了，各位看客可以慢慢浏览。我时常感叹一个松散的 Debian 组织，能把开发过程整理的如此规整，透明，富含信息量，比无数商业公司都强了一个数量级。

鼓吹完 Debian 后，再聊聊系统配置管理工具。为了让配置可重复，可快速重复，精准重复，第一要义是把配置过程脚本化，以此思想提升一级，把各种配置任务、资源抽象出来，形成一个代码库和驱动程序，加上用户自定义规则，编写出简练可移植的管理自动化脚本，这种思路催生了大量系统配置管理工具。这方面比较出名的有 cfengine 和 puppet。我浅浅尝试了下 cfengine 最新改写版 cfengine 3 和 puppet，感觉都不大好。cfengine3 的 bug 现在还比较多，而最郁闷的是这东西稍微一点高级功能就放在收费版本里，让我非常恼火，开源版本非常鸡肋，另外我也很担心 cfengine 的限制版编程功能不够灵活，实现复杂逻辑太费力，经常需要调用外部脚本。所谓牛刀可杀鸡，鸡刀不可屠牛，如果一定要我选择，还是给我牛刀吧。。。。puppet 的开源做的不错，文档、社区、规则库都发展的相当好，我把其手册打印出来好好拜读了一番，但在跌跌撞撞学习了之后，我也同样觉得很郁闷。这是我之前在水木社区发的一片抱怨文：
http://www.newsmth.net/nForum/article/LinuxApp/819076

“依赖太多了，语法不断扩展已然基本是新的编程语言了”，

“puppet master 最阳春的是用 webbrick，文档说这个性能很差，推荐
用 mongrel 甚至更好的 mod_passenger，前者需要一个 web server，
做 proxy 因为 mongrel 不支持 ssl，后者需要 apache。
 
puppet master 似乎包含了一个 rails 应用，所以依赖了 rails。
操作文件内容依赖了augeas 库，puppet agent 向  puppet master
汇报时，为了提高 puppet master 响应能力，这个 report 被异步
处理，依赖 stompserver。
  
storeconfigs 特性需要 puppet master 用一个数据库，阳春的是
sqlite3，高端点要用 mysql、postgresql。
  
如果用预编译配置的办法，需要 memcached。
  
所以你可以看到这一大堆依赖有点恐怖吧。
  
性能差可能是 ruby 解释器太慢、走 http 协议的缘故。另外配置的
生成（不是说执行）是在 puppet master 里而非 agent，似乎 cfengine
里配置的生成是在 agent 里。
  
内存占用 puppet 100 MB 左右，还不算 stompserver/mysql/memcached 这些，相比
下 cfengine 的内存占用小一个数量级。 ”

可能抱怨的太抽象，总之，用 Puppet 已经不是一个问题变成两个问题，而是一个问题变成 N 个问题，在我投入精力折腾工作所需服务之前，我就得花好多精力配置 puppet 这个服务，伊还消耗相当多内存和 CPU 资源，太蛋疼了。

一开始我尝试写个自己的配置管理工具，粗略有三个目标，第一，它就是要支持脚本语言，我愤怒提供阉割版编程功能的东西，尤其是在发现不够灵活之后加入更多传统编程语言元素的东西；第二，类似 Make 支持并发执行配置规则；第三，规则的执行是事务性的，要么成功，改动了系统，要么失败，没有改动系统，不要留着烂摊子等下次运行再清理，因为在这个过程中系统处于不稳定状态，容易出问题。

有这种重造轮子的想法绝对不只我一个人，就我所知的，鄙公司的大牛们已然造了三代广为使用的内部系统管理工具，用来维护大量的服务器，导致一个笑话就是新人入职时看到一个工具说哇，好高级啊，好复杂啊，好好啊，然后被人打击：拜托，那玩意的下一代都已经不推荐使用了！

可惜我还是太弱而且太懒，一直没努力把轮子造出来，痛定思痛，我还是回归到我所想做的事情吧：配置一套 IT 基础设施，至于配置工具，worse is better，粗快猛是我 coder 本色，先把正经东西鼓捣出来给人 show show，laf。。。

浅尝 cfengine 还是对我有深远影响的，cfengine 极为提倡 promise，我个人理解就是 rule，一个 rule 规定了一个规则让系统收敛到期望的稳定状态，如果系统已经处在那个状态了，那么 rule 就应该没有任何实际动作。这个思想有点多线程编程的可重入的意思，多次执行同一个规则应该是安全的，不会有永远的副作用。譬如一个 rule 规定了某个文件是 0644，那么一条 chmod 是不行的，因为它达不到稳定状态，文件的 ctime 总是在变，这会影响备份程序。领会这个思想后，我就觉得用什么工具都无所谓了，只要写脚本时能注意稳定状态这个目标，兼顾 coding 一贯准则“可维护性”，就能写出符合 cfengine promise 思想的可维护的定制配置系统。

此为系列开篇，为啥我用 Debian，以及糙快猛的用 shell 脚本做配置自动化。

